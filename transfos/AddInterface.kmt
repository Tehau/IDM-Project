/* $Id:$ 
 * Creation : December 10, 2013
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            ttsing
 */
@mainClass "transfos::Main"
@mainOperation "main"

//http://web.univ-pau.fr/~ecariou/cours/idm/docs/KerMeta-Manual.pdf
package transfos;

require kermeta

// meta-modele du diagramme de classe
require "platform:/resource/ClassDiagram/metaModels/ClassDiagram.ecore"

// fonctions utilitaires Kermeta associees au MM de diagramme de classe
require "platform:/resource/ClassDiagram/metaModels/ClassDiagramUtil.kmt"


using kermeta::persistence
using kermeta::exceptions
using kermeta::standard

// package du meta-modele
using ClassDiagram

// package des fonctions utilitaires
using ClassDiagramUtil

class Main
{
	// hack pour avoir n'importe ou une reference sur le type void
	reference voidT : VoidType
	
	
	operation AddInterface(base : ClassDiagram::ModelBase) : ClassDiagram::ModelBase is do
		var i : Integer init 1
		var j : Integer init 1
		var methodNames : seq Method[1..*] init Sequence<Method>.new
		base.allClasses.each{c1|
			base.allClasses.each{c2|
				if( i < j )
				then
					CheckInterface(c1,c2,methodNames)
				else
					//stdio.writeln("Same Class or Already check")
				end
				j := j+1
			}
			j := 1
			i := i+1
		}
		base := MakeInterface(methodNames,base)
		base := asSameInterface(base)
		//Return Model with interfaces
		result := base
	end
	
	operation CheckInterface(c1 : ClassDiagram::Class, c2 : ClassDiagram::Class, methodNames : Sequence<Method> ) : Void is do
		var check : Boolean init true
		if(c1.name.equals(c2.name) == false)
		then
			//stdio.writeln("C1 : "+c1.name)
			//stdio.writeln("C2 : "+c2.name)
			c1.methods.each{m1|
				c2.methods.each{m2|
					if(asSameMethod(m1,m2))
					then
						if(methodNames.size() == 0)
						then
							methodNames.add(m1)
						else
							check := false
							methodNames.each{m|
								if(m.name.equals(m1.name))
								then
									check := true
								end
							}
							if(check == false)
							then
								methodNames.add(m1)
							end
						end
					end
				}
			}
		else
			//stdio.writeln("Same Class dont add Interface")
		end
		
	end
	
	// check if same method
	operation asSameMethod(m1 : ClassDiagram::Method, m2 : ClassDiagram::Method) : Boolean is do
		var check : Boolean init true
		var i : Integer init 0
		var j : Integer init 0
		
		if(m1.name.equals(m2.name))
		then
			m1.parameters.each{p1|
				m2.parameters.each{p2|
					//stdio.writeln("	Nom : "+ m1.name +" parametre : " + p1.name +" type : " + p1.type.name)
					//stdio.writeln("	Nom : "+ m2.name +" parametre : " + p2.name +" type : " + p2.type.name)
					if(i == j and check == true)
					then
						check := p1.type.name.equals(p2.type.name)
					end
					j := j+1
					//stdio.writeln("	Check : "+p1.type.name.equals(p2.type.name).toString())
				}
				i := i+1
				j := 0
			}
			if(m1.returnType.name.equals(m2.returnType.name) == false)
			then
				check := false
			end
		else
			check := false
		end
		result := check
	end
	
	operation MakeInterface(methodNames : Sequence<Method>,base : ClassDiagram::ModelBase) : ClassDiagram::ModelBase is do
		//stdio.writeln("Make Interface")
		var int : ClassDiagram::Interface
		methodNames.each{m1|
			int := ClassDiagram::Interface.new
			int.name := "Interface" + m1.name.substring(0,1).toUpperCase + m1.name.substring(1,m1.name.size)
			//stdio.writeln("Interface Name : "+int.name)
			//Rajout de la class qui implemente l'interface
			base.allClasses.each{c|
				c.methods.each{m2|
					if(m1.name.equals(m2.name))
					then 
						int.implementedBy.add(c)
						c.methods.remove(m2)
					end
				}
			}
			int.methods.add(m1)
			base.allInterfaces.add(int)
		}
		
		result := base
	end
	
	
	operation asSameInterface(base : ClassDiagram::ModelBase) : ClassDiagram::ModelBase is do
		
		var i : Integer init 1
		var j : Integer init 1
		var sizeOrigin : Integer
		
		//Permet de garder le nombre d'origin de nos interfaces pour ne pas avoir des problemes lors d'un nouvel ajout
		//
		sizeOrigin := base.allInterfaces.size()
		
		base.allInterfaces.each{i1|
			base.allInterfaces.each{i2|
				//stdio.writeln("i1 : "+i1.name+" i2 : "+i2.name+" = "+i1.implementedBy.equals(i2.implementedBy).toString())
				if( i < j and i1.implementedBy.equals(i2.implementedBy) and i < sizeOrigin)
				then
					base.allInterfaces.add(MergeInterface(i1,i2))
					i1.implementedBy.clear()
					i2.implementedBy.clear()
					base.allInterfaces.remove(i1)
					base.allInterfaces.remove(i2)
				end
				j := j+1
			}
			j := 1
			i := i+1
		}
		
		result := base
	end
	
	operation MergeInterface(int1 : ClassDiagram::Interface, int2 : ClassDiagram::Interface) : ClassDiagram::Interface is do
		//TODO
		//Faire le merge des interfaces si des classes utilisent les meme
		//	Regarder dans les interfaces quelle classe implemente notre interface
		var int : ClassDiagram::Interface
		int := ClassDiagram::Interface.new
		int.name := "Interface" + int1.name.substring(9,int1.name.size).toUpperCase + int2.name.substring(9,int2.name.size)
		int1.implementedBy.each{c|
			int.implementedBy.add(c)
		}
		
		result := int
	end
	
	operation main() : Void is do 

		// creation of the util object for loading/saving/printing models
		var util : ClassDiagramUtil::Util init ClassDiagramUtil::Util.new
		
		var source : ClassDiagram::ModelBase
		var target : ClassDiagram::ModelBase
		
		source := util.loadModel("platform:/resource/ClassDiagram/models/ModelBase.xmi")
		voidT := source.voidT
		
		stdio.writeln(" === modele source ===")
		util.printModel(source)
		
		stdio.writeln(" === Traitement ===\n")
		target := AddInterface(source)
		
		stdio.writeln(" === modele cible ====")
		util.printModel(target)
		
		util.saveModel(target, "platform:/resource/ClassDiagram/models/ModelBaseInterfaceKermeta.xmi")
		stdio.writeln(" === modele cible sauvegarde ===")
	end

}